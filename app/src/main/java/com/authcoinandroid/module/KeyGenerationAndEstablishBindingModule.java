package com.authcoinandroid.module;

import android.security.keystore.KeyGenParameterSpec;
import android.security.keystore.KeyProperties;
import android.util.Pair;
import com.authcoinandroid.model.EntityIdentityRecord;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;

import static com.authcoinandroid.service.identity.EcEirBuilder.newEcEirBuilder;

/**
 * "KeyGenerationEstablishBinding" module
 * <p>
 * Differences: see {@link KeyGenerationModule} and {@link EstablishBindingModule} submodules.
 */
public class KeyGenerationAndEstablishBindingModule {

    private static KeyGenerationModule keyGenerator = new KeyGenerationModule();
    private static EstablishBindingModule bindingModule = new EstablishBindingModule();

    public static Pair<KeyPair, EntityIdentityRecord> generateAndEstablishBinding(String[] identifiers, String alias)
            throws GeneralSecurityException, IOException {
        KeyPair keyPair = keyGenerator.createNewKeyPair(alias);
        EntityIdentityRecord eir = bindingModule.establishBinding(identifiers, keyPair);
        return Pair.create(keyPair, eir);
    }

    /**
     * "CreateNewKeyPair" submodule.
     * <p>
     * Differences:
     * 1. Id is replaced by alias. Alias is used to store the key to Android KeyStore.
     * 2. Android KeyPair generator is used instead of OpenSSH.
     * 3. EC key is generated. No input parameters defined in master's thesis is needed.
     */
    public static class KeyGenerationModule {

        public KeyPair createNewKeyPair(String alias) throws GeneralSecurityException {
            KeyPairGenerator kpg = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC, "AndroidKeyStore");
            kpg.initialize(
                    new KeyGenParameterSpec.Builder(alias, KeyProperties.PURPOSE_SIGN | KeyProperties.PURPOSE_VERIFY)
                            .setDigests(KeyProperties.DIGEST_SHA256, KeyProperties.DIGEST_SHA512)
                            .build());
            return kpg.generateKeyPair();
        }

    }

    /**
     * "EstablishBinding" submodule.
     * <p>
     * Differences:
     * 1. ID parameter is generated by smart contract (hash(pubKey))
     * 2. Timestamp is replaced by block number and is added by smart contract.
     */
    public static class EstablishBindingModule {

        public EntityIdentityRecord establishBinding(String[] identifiers, KeyPair keyPair) throws GeneralSecurityException, IOException {
            return newEcEirBuilder()
                    .addIdentifiers(identifiers)
                    .addContent(keyPair.getPublic())
                    .setContentType()
                    .calculateHash()
                    .signHash(keyPair)
                    .getEir();
        }
    }
}


