package com.authcoinandroid.module;

import android.security.keystore.KeyGenParameterSpec;
import android.security.keystore.KeyProperties;
import android.util.Pair;

import com.authcoinandroid.model.EirIdentifier;
import com.authcoinandroid.model.EntityIdentityRecord;
import com.authcoinandroid.service.identity.EirRepository;

import org.spongycastle.jce.ECNamedCurveTable;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;

/**
 * "KeyGenerationEstablishBinding" module
 * <p>
 * Differences: see {@link KeyGenerationModule} and {@link EstablishBindingModule} submodules.
 */
public class KeyGenerationAndEstablishBindingModule {

    private static final String PROVIDER_ANDROID_KEY_STORE = "AndroidKeyStore";
    private KeyGenerationModule keyGenerator = new KeyGenerationModule();
    private EstablishBindingModule bindingModule = new EstablishBindingModule();
    private EirRepository repository;

    public KeyGenerationAndEstablishBindingModule(EirRepository repository) {
        this.repository = repository;
    }

    public Pair<KeyPair, EntityIdentityRecord> generateAndEstablishBinding(String[] identifiers, String alias)
            throws GeneralSecurityException, IOException {
        KeyPair keyPair = keyGenerator.createNewKeyPair(alias);
        EntityIdentityRecord eir = bindingModule.establishBinding(identifiers, keyPair, alias);
        return Pair.create(keyPair, eir);
    }

    /**
     * "CreateNewKeyPair" submodule.
     * <p>
     * Differences:
     * 1. Id is replaced by alias. Alias is used to store the key to Android KeyStore.
     * 2. Android KeyPair generator is used instead of OpenSSH.
     * 3. EC key is generated. No input parameters defined in master thesis is needed.
     */
    public class KeyGenerationModule {

        public KeyPair createNewKeyPair(String alias) throws GeneralSecurityException {
            KeyPairGenerator kpg = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC, PROVIDER_ANDROID_KEY_STORE);
            kpg.initialize(
                    new KeyGenParameterSpec.Builder(alias, KeyProperties.PURPOSE_SIGN | KeyProperties.PURPOSE_VERIFY)
                            .setDigests(KeyProperties.DIGEST_SHA256, KeyProperties.DIGEST_SHA512)
                            .build());
            return kpg.generateKeyPair();
        }

    }

    /**
     * "EstablishBinding" submodule.
     * <p>
     * Differences:
     * 1. ID parameter is generated by smart contract (hash(pubKey))
     * 2. Timestamp is replaced by block number and is added by smart contract.
     */
    public class EstablishBindingModule {

        public EntityIdentityRecord establishBinding(String[] identifiers, KeyPair keyPair, String alias) throws GeneralSecurityException, IOException {
            EntityIdentityRecord eir = new EntityIdentityRecord(
                    "test",
                    alias,
                    keyPair
            );
            for (String identifier : identifiers) {
                EirIdentifier eirIdentifier = new EirIdentifier(identifier);
                eirIdentifier.setEir(eir);
                eir.getIdentifiers().add(eirIdentifier);
            }

            eir = repository.save(eir).blockingGet();
            return eir;
        }
    }
}
